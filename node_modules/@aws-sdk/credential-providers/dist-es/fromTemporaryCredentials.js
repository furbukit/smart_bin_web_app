import { __assign, __awaiter, __generator, __values } from "tslib";
import { AssumeRoleCommand, STSClient } from "@aws-sdk/client-sts";
import { CredentialsProviderError } from "@aws-sdk/property-provider";
export var fromTemporaryCredentials = function (options) {
    var stsClient;
    return function () { return __awaiter(void 0, void 0, void 0, function () {
        var params, _a, _b, _c, plugin, Credentials;
        var e_1, _d;
        var _e;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    params = __assign(__assign({}, options.params), { RoleSessionName: (_e = options.params.RoleSessionName) !== null && _e !== void 0 ? _e : "aws-sdk-js-" + Date.now() });
                    if (!(params === null || params === void 0 ? void 0 : params.SerialNumber)) return [3, 2];
                    if (!options.mfaCodeProvider) {
                        throw new CredentialsProviderError("Temporary credential requires multi-factor authentication," + " but no MFA code callback was provided.", false);
                    }
                    _a = params;
                    return [4, options.mfaCodeProvider(params === null || params === void 0 ? void 0 : params.SerialNumber)];
                case 1:
                    _a.TokenCode = _f.sent();
                    _f.label = 2;
                case 2:
                    if (!stsClient)
                        stsClient = new STSClient(__assign(__assign({}, options.clientConfig), { credentials: options.masterCredentials }));
                    if (options.clientPlugins) {
                        try {
                            for (_b = __values(options.clientPlugins), _c = _b.next(); !_c.done; _c = _b.next()) {
                                plugin = _c.value;
                                stsClient.middlewareStack.use(plugin);
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (_c && !_c.done && (_d = _b.return)) _d.call(_b);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                    }
                    return [4, stsClient.send(new AssumeRoleCommand(params))];
                case 3:
                    Credentials = (_f.sent()).Credentials;
                    if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
                        throw new CredentialsProviderError("Invalid response from STS.assumeRole call with role ".concat(params.RoleArn));
                    }
                    return [2, {
                            accessKeyId: Credentials.AccessKeyId,
                            secretAccessKey: Credentials.SecretAccessKey,
                            sessionToken: Credentials.SessionToken,
                            expiration: Credentials.Expiration,
                        }];
            }
        });
    }); };
};
